global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/private
	crt-base /etc/ssl/private

	# Default ciphers to use on SSL-enabled listening sockets.
	# For more information, see ciphers(1SSL). This list is from:
	#  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
	ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS
	ssl-default-bind-options no-sslv3

defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http

frontend registry  
        # we need to bind both to http and https
        # because registry communication will fail
        bind *:80
        bind *:443 ssl crt /etc/ssl/private/domain.pem
        option forwardfor
        http-request set-header X-Forwarded-Proto https if { ssl_fc }
        redirect scheme https if !{ ssl_fc }
        acl host_registry hdr(host) -i example.com
        use_backend registry-cluster if host_registry

backend registry-cluster  
       redirect scheme https if !{ ssl_fc }
       balance roundrobin
       server node1 localhost.com:5000 check


#frontend www-https
#   bind  127.0.0.1:443 ssl crt /etc/ssl/private/localhost.pem
#   reqadd X-Forwarded-Proto:\ https
#   default_backend www-backend
   
#backend www-backend
#   server www-1 localhost.com:5000 check
